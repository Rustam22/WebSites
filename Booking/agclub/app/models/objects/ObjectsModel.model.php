<?php	class ObjectsModel extends CRUDModel {				public $r_id;		public $lang_id;		public $treeItemId;		public $type;		public $category;		public $objTitle;		public $objLogo;		public $webSite;		public $discount;		public $description;		public $address;		public $phone;		public $map;		public $isNew;		public $rating;		public $ratesCount;				public static $multiLang = true;				public function __construct() {			$messages = Application::$messages['model_objects'];						$this->treeItemId = new ModelIntegerField("treeItemId", Application::$messages['model_category']['field_parentId'], true, true);			$this->treeItemId->hidden = true;						$this->type = new ModelSelectField("type", $messages['field_type'], Array("1" => "Object", "2" => "Map", "3" => "Object with Map"), true, true);			$this->type->common = true;			$this->type->tplFile = 'objects-selectfield.tpl';						$categories = CategoryModel::getOnlyLastCategories(0, 'itemTitle', Application::$settings['default_language']);			$this->category = new ModelSelectField("category", $messages['field_category'], $categories, true, true);			$this->category->common = true;			$this->category->htmlCss = Array(				'class' => 'objects-item-object'			);						$this->objTitle = new ModelTextField("objTitle", $messages['field_objTitle'], true, true);			$this->objTitle->dbLength = 200;			$this->objTitle->common = true;			$this->objTitle->htmlCss = Array(				'class' => 'objects-item-object'			);						$this->objLogo = new ModelFMImageField("objLogo", $messages['field_objLogo'], false, true);			$this->objLogo->required = false;			$this->objLogo->common = true;			$this->objLogo->required = false;			$this->objLogo->htmlCss = Array(				'class' => 'objects-item-object'			);						$this->webSite = new ModelTextField("webSite", $messages['field_webSite'], true, true);			$this->webSite->common = true;			$this->webSite->required = false;			$this->webSite->htmlCss = Array(				'class' => 'objects-item-object'			);						$this->discount = new ModelTextField("discount", $messages['field_discount'], true, true);			$this->discount->common = true;			$this->discount->htmlCss = Array(				'class' => 'objects-item-object'			);						$this->description = new ModelTextArea("description", $messages['field_description'], true, true);			$this->description->required = false;			$this->description->htmlCss = Array(				'class' => 'objects-item-object'			);						$this->address = new ModelTextField("address", $messages['field_address'], true, true);			$this->address->htmlCss = Array(				'class' => 'objects-item-map'			);						$this->phone = new ModelTextField("phone", $messages['field_phone'], true, true);			$this->phone->common = true;			$this->phone->htmlCss = Array(				'class' => 'objects-item-map'			);						$this->map = new ModelTextArea("map", $messages['field_map'], true, true);			$this->map->common = true;			$this->map->htmlCss = Array(				'class' => 'objects-item-map'			);						$this->isNew = new ModelSelectField("isNew", $messages['field_isNew'], Array("1" => "No", "2" => "Yes"), true, true);			$this->isNew->common = true;			$this->isNew->htmlCss = Array(				'class' => 'objects-item-object'			);						$this->rating = new ModelIntegerField("rating", $messages['field_phone'], true, true);			$this->rating->hidden = true;			$this->rating->common = true;						$this->ratesCount = new ModelIntegerField("ratesCount", $messages['field_phone'], true, true);			$this->ratesCount->hidden = true;			$this->ratesCount->common = true;		}				public static function initialize() {			self::$displayFields = Array('objLogo', 'category', 'objTitle', 'discount', 'address', 'phone', 'isNew');			self::$title = Application::$messages['model_objects']['title'];			self::$iconPath = 'category-icons.png';			self::$multiLang = true;			self::$viewUrl = 'category';		}				public static function view($request, &$smarty, $vars = Array()) {			return false;		}				public static function getObjectsForCategory($category, $lang, $start = false, $limit = false) {			$sql = "				SELECT `vl1_ObjectsModel`.*, `vl1_ObjectsRelationsModel`.`id` as `elId` 				FROM 				`vl1_ObjectsModel` INNER JOIN `vl1_ObjectsRelationsModel`				ON				`vl1_ObjectsModel`.`treeItemId` = `vl1_ObjectsRelationsModel`.`id`				WHERE 				`vl1_ObjectsModel`.`category` = '{#1}' 				AND `vl1_ObjectsModel`.`lang_id` = '{#2}' 				AND `vl1_ObjectsModel`.`type` != '2'				ORDER BY `vl1_ObjectsRelationsModel`.`order` ASC, `vl1_ObjectsRelationsModel`.`parentId` DESC			";			if (($start !== false) && ($limit !== false)) $sql .= " LIMIT " . $start . "," . $limit;			$r = self::fQuery($sql, Array($category, $lang));						return $r;		}		public static function searchObject($searchText, $lang, $start, $limit) {			$sql = "				SELECT `vl1_ObjectsModel`.*, `vl1_ObjectsRelationsModel`.`id` as `elId` 				FROM 				`vl1_ObjectsModel` INNER JOIN `vl1_ObjectsRelationsModel`				ON				`vl1_ObjectsModel`.`treeItemId` = `vl1_ObjectsRelationsModel`.`id`				WHERE 				`vl1_ObjectsModel`.`objTitle` LIKE '%".$searchText."%' 				AND `vl1_ObjectsModel`.`lang_id` = '{#1}' 				AND `vl1_ObjectsModel`.`type` != '2'				ORDER BY `vl1_ObjectsRelationsModel`.`order` ASC, `vl1_ObjectsRelationsModel`.`parentId` DESC 				LIMIT ".$start.",".$limit." 			";			$data = self::fQuery($sql, Array($lang)); 			return $data;		}		public static function searchObjsCount($searchText, $lang) {			$sql = "				SELECT count(*) as `cnt` 				FROM 				`vl1_ObjectsModel` INNER JOIN `vl1_ObjectsRelationsModel`				ON				`vl1_ObjectsModel`.`treeItemId` = `vl1_ObjectsRelationsModel`.`id`				WHERE 				`vl1_ObjectsModel`.`objTitle` LIKE '%".$searchText."%' 				AND `vl1_ObjectsModel`.`lang_id` = '{#1}' 				AND `vl1_ObjectsModel`.`type` != '2'				ORDER BY `vl1_ObjectsRelationsModel`.`order` ASC, `vl1_ObjectsRelationsModel`.`parentId` DESC 			";			$data = self::fQuery($sql, Array($lang)); 			return $data[0]['cnt'];		}				public static function getObjectsCount($category, $lang) {			$sql = "				SELECT `vl1_ObjectsModel`.*, `vl1_ObjectsRelationsModel`.`id` as `elId` 				FROM 				`vl1_ObjectsModel` INNER JOIN `vl1_ObjectsRelationsModel`				ON				`vl1_ObjectsModel`.`treeItemId` = `vl1_ObjectsRelationsModel`.`id`				WHERE 				`vl1_ObjectsModel`.`category` = '{#1}' 				AND `vl1_ObjectsModel`.`lang_id` = '{#2}' 				AND `vl1_ObjectsModel`.`type` <> '2'			";			$r = self::fQuery($sql, Array($category, $lang));			return count($r);		}				public static function getDataFor($id, $lang) {			$sql = "				SELECT `vl1_ObjectsModel`.*				FROM 				`vl1_ObjectsModel` INNER JOIN `vl1_ObjectsRelationsModel`				ON				`vl1_ObjectsModel`.`treeItemId` = `vl1_ObjectsRelationsModel`.`id`				WHERE 				`vl1_ObjectsRelationsModel`.`parentId` = '{#1}' 				AND `vl1_ObjectsModel`.`lang_id` = '{#2}' 				ORDER BY `vl1_ObjectsRelationsModel`.`order` ASC, `vl1_ObjectsRelationsModel`.`parentId` DESC			";			return self::fQuery($sql, Array($id, $lang));		}				public static function getDiscount($objectId, $lang) {			$r = self::find(" WHERE `lang_id` = '{#1}' AND `r_id` = '{#2}'", Array($lang, $objectId));			if (count($r)) return $r[0];			else return false;		}				public static function getNewObjects($lang) {			$sql = "				SELECT `vl1_ObjectsModel`.*				FROM 				`vl1_ObjectsModel` INNER JOIN `vl1_ObjectsRelationsModel`				ON				`vl1_ObjectsModel`.`treeItemId` = `vl1_ObjectsRelationsModel`.`id`				WHERE `vl1_ObjectsModel`.`lang_id` = '{#1}' 				AND `vl1_ObjectsModel`.`type` <> '2'				AND `vl1_ObjectsModel`.`isNew` = '2'				ORDER BY `vl1_ObjectsRelationsModel`.`order` ASC, `vl1_ObjectsRelationsModel`.`parentId` DESC			";			$r = self::fQuery($sql, Array($lang));						return $r;		}			}?>